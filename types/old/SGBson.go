// This code is generated by 'templr'
// DO NOT EDIT

package types

import (
        "errors"
        "gopkg.in/mgo.v2/bson"
)

func (this *CondKind) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), conds); ok {
        *this = CondKind(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this CondKind) MarshalJSON() ([]byte, error) {
    return []byte(conds[this]), nil
}

func (this *CondKind) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, conds); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = CondKind(reti)
            return nil
        }
    }
}

func (this CondKind) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(conds) && i > -1 {
        return conds[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this CondKind) String() string {
    var i = int(this)
    if i < len(conds) && i > -1 {
        return conds[i]
    } else {
        return ""
    }
}

func (this *SubjectKind) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), subjects); ok {
        *this = SubjectKind(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this SubjectKind) MarshalJSON() ([]byte, error) {
    return []byte(subjects[this]), nil
}

func (this *SubjectKind) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, subjects); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = SubjectKind(reti)
            return nil
        }
    }
}

func (this SubjectKind) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(subjects) && i > -1 {
        return subjects[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this SubjectKind) String() string {
    var i = int(this)
    if i < len(subjects) && i > -1 {
        return subjects[i]
    } else {
        return ""
    }
}

func (this *CrimeK) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), crimes); ok {
        *this = CrimeK(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this CrimeK) MarshalJSON() ([]byte, error) {
    return []byte(crimes[this]), nil
}

func (this *CrimeK) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, crimes); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = CrimeK(reti)
            return nil
        }
    }
}

func (this CrimeK) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(crimes) && i > -1 {
        return crimes[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this CrimeK) String() string {
    var i = int(this)
    if i < len(crimes) && i > -1 {
        return crimes[i]
    } else {
        return ""
    }
}

func (this *CrimeCat) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), crimecats); ok {
        *this = CrimeCat(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this CrimeCat) MarshalJSON() ([]byte, error) {
    return []byte(crimecats[this]), nil
}

func (this *CrimeCat) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, crimecats); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = CrimeCat(reti)
            return nil
        }
    }
}

func (this CrimeCat) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(crimecats) && i > -1 {
        return crimecats[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this CrimeCat) String() string {
    var i = int(this)
    if i < len(crimecats) && i > -1 {
        return crimecats[i]
    } else {
        return ""
    }
}

func (this *Regim) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), regims); ok {
        *this = Regim(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this Regim) MarshalJSON() ([]byte, error) {
    return []byte(regims[this]), nil
}

func (this *Regim) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, regims); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = Regim(reti)
            return nil
        }
    }
}

func (this Regim) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(regims) && i > -1 {
        return regims[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this Regim) String() string {
    var i = int(this)
    if i < len(regims) && i > -1 {
        return regims[i]
    } else {
        return ""
    }
}

func (this *GoPos) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), goposes); ok {
        *this = GoPos(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this GoPos) MarshalJSON() ([]byte, error) {
    return []byte(goposes[this]), nil
}

func (this *GoPos) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, goposes); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = GoPos(reti)
            return nil
        }
    }
}

func (this GoPos) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(goposes) && i > -1 {
        return goposes[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this GoPos) String() string {
    var i = int(this)
    if i < len(goposes) && i > -1 {
        return goposes[i]
    } else {
        return ""
    }
}

func (this *OrderKind) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), orders); ok {
        *this = OrderKind(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this OrderKind) MarshalJSON() ([]byte, error) {
    return []byte(orders[this]), nil
}

func (this *OrderKind) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, orders); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = OrderKind(reti)
            return nil
        }
    }
}

func (this OrderKind) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(orders) && i > -1 {
        return orders[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this OrderKind) String() string {
    var i = int(this)
    if i < len(orders) && i > -1 {
        return orders[i]
    } else {
        return ""
    }
}

func (this *Restraint) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), restraints); ok {
        *this = Restraint(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this Restraint) MarshalJSON() ([]byte, error) {
    return []byte(restraints[this]), nil
}

func (this *Restraint) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, restraints); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = Restraint(reti)
            return nil
        }
    }
}

func (this Restraint) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(restraints) && i > -1 {
        return restraints[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this Restraint) String() string {
    var i = int(this)
    if i < len(restraints) && i > -1 {
        return restraints[i]
    } else {
        return ""
    }
}

func (this *Decree) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), decrees); ok {
        *this = Decree(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this Decree) MarshalJSON() ([]byte, error) {
    return []byte(decrees[this]), nil
}

func (this *Decree) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, decrees); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = Decree(reti)
            return nil
        }
    }
}

func (this Decree) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(decrees) && i > -1 {
        return decrees[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this Decree) String() string {
    var i = int(this)
    if i < len(decrees) && i > -1 {
        return decrees[i]
    } else {
        return ""
    }
}

func (this *AppSubj) UnmarshalJSON(b []byte) error {
    if reti, ok := stringInSlice(string(b), appsubjs); ok {
        *this = AppSubj(reti)
    } else {
        return errors.New("Out of range in SetBSON")
    }
    return nil
}

func (this AppSubj) MarshalJSON() ([]byte, error) {
    return []byte(appsubjs[this]), nil
}

func (this *AppSubj) SetBSON(raw bson.Raw) error {
    var res string
    if err := raw.Unmarshal(&res); err != nil {
        return errors.New("Error unmarshal in SetBSON" + err.Error())
    } else {
        if reti, ok := stringInSlice(res, appsubjs); !ok {
            return errors.New("Out of range in SetBSON")
        } else {
            *this = AppSubj(reti)
            return nil
        }
    }
}

func (this AppSubj) GetBSON() (interface{}, error) {
    var i = int(this)-1
    if i < len(appsubjs) && i > -1 {
        return appsubjs[i], nil
    } else {
        return nil, errors.New("Out of range in GetBSON")
    }
}

func (this AppSubj) String() string {
    var i = int(this)
    if i < len(appsubjs) && i > -1 {
        return appsubjs[i]
    } else {
        return ""
    }
}

